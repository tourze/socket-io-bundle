<!DOCTYPE html>
<html>
<head>
    <title>Socket.IO Debug</title>
    <script src="https://cdn.socket.io/4.7.4/socket.io.min.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            line-height: 1.5;
            padding: 15px;
            max-width: 800px;
            margin: 0 auto;
            background: #f8f9fa;
        }
        .debug-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 15px;
        }
        .form-group {
            margin-bottom: 12px;
        }
        .form-group label {
            display: block;
            margin-bottom: 4px;
            font-weight: 500;
            color: #333;
        }
        .form-group input[type="text"] {
            width: 100%;
            padding: 6px 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 8px;
        }
        .btn {
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 4px;
            font-size: 13px;
        }
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        .btn-primary { background: #0074D9; color: white; }
        .btn-danger { background: #FF4136; color: white; }
        .btn-success { background: #2ECC40; color: white; }
        .events-container {
            margin-top: 15px;
            border: 1px solid #eee;
            padding: 8px;
            height: 250px;
            overflow-y: auto;
            font-size: 13px;
            background: #fafafa;
        }
        .event-item {
            padding: 4px 6px;
            border-bottom: 1px solid #eee;
        }
        .event-item:last-child {
            border-bottom: none;
        }
        .status {
            margin: 8px 0;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 4px;
            font-size: 13px;
        }
        .rooms-container {
            margin: 8px 0;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 4px;
        }
        .room-item {
            display: inline-block;
            margin: 2px 4px;
            padding: 2px 8px;
            background: #e9ecef;
            border-radius: 12px;
            font-size: 12px;
        }
        .tabs {
            display: flex;
            margin-bottom: 15px;
            border-bottom: 1px solid #ddd;
            gap: 2px;
        }
        .tab {
            padding: 8px 15px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-bottom: -1px;
            background: #f8f9fa;
            border-radius: 4px 4px 0 0;
            font-size: 13px;
        }
        .tab.active {
            background: white;
            border-color: #ddd;
            border-bottom-color: white;
            font-weight: 500;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .tab-close {
            margin-left: 8px;
            color: #999;
            cursor: pointer;
            font-size: 14px;
        }
        .tab-close:hover {
            color: #666;
        }
        .add-tab {
            padding: 4px 8px;
            background: #f8f9fa;
            border: 1px dashed #ddd;
            cursor: pointer;
            margin: 2px 4px;
            border-radius: 4px;
            font-size: 12px;
            color: #666;
        }
        .add-tab:hover {
            background: #f1f3f5;
            border-color: #ccc;
        }
        /* 滚动条样式 */
        .events-container::-webkit-scrollbar {
            width: 6px;
        }
        .events-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }
        .events-container::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 3px;
        }
        .events-container::-webkit-scrollbar-thumb:hover {
            background: #999;
        }
    </style>
</head>
<body>
    <div class="debug-container">
        <div class="tabs">
            <div class="tab active" data-tab="tab1">Client 1</div>
            <div class="add-tab">+ New Client</div>
        </div>

        <div id="tab1" class="tab-content active">
            <div class="client-container">
                <div class="form-group">
                    <label>Socket.IO Server URL:</label>
                    <input type="text" class="server-url" value="{{ app.request.schemeAndHttpHost }}">
                    <button class="btn btn-primary connect">Connect</button>
                    <button class="btn btn-danger disconnect" disabled>Disconnect</button>
                </div>

                <div class="status">
                    <strong>Status:</strong> <span class="connection-status">Disconnected</span><br>
                    <strong>Socket ID:</strong> <span class="socket-id">-</span>
                </div>

                <div class="form-group">
                    <label>Room Management:</label>
                    <input type="text" class="room-name" placeholder="Enter room name">
                    <button class="btn btn-success join-room" disabled>Join Room</button>
                    <button class="btn btn-danger leave-room" disabled>Leave Room</button>
                </div>

                <div class="rooms-container">
                    <strong>Joined Rooms:</strong>
                    <div class="rooms-list"></div>
                </div>

                <div class="form-group">
                    <label>Event Management:</label>
                    <input type="text" class="event-name" placeholder="Enter event name">
                    <button class="btn btn-success subscribe" disabled>Subscribe</button>
                    <button class="btn btn-danger unsubscribe" disabled>Unsubscribe</button>
                </div>

                <div class="form-group">
                    <label>Send Event:</label>
                    <input type="text" class="emit-event" placeholder="Event name">
                    <input type="text" class="emit-data" placeholder="Event data (JSON)">
                    <button class="btn btn-primary emit" disabled>Send</button>
                </div>

                <div class="events-container">
                    <div class="event-item">Events will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <template id="client-template">
        <div class="client-container">
            <div class="form-group">
                <label>Socket.IO Server URL:</label>
                <input type="text" class="server-url" value="{{ app.request.schemeAndHttpHost }}">
                <button class="btn btn-primary connect">Connect</button>
                <button class="btn btn-danger disconnect" disabled>Disconnect</button>
            </div>

            <div class="status">
                <strong>Status:</strong> <span class="connection-status">Disconnected</span><br>
                <strong>Socket ID:</strong> <span class="socket-id">-</span>
            </div>

            <div class="form-group">
                <label>Room Management:</label>
                <input type="text" class="room-name" placeholder="Enter room name">
                <button class="btn btn-success join-room" disabled>Join Room</button>
                <button class="btn btn-danger leave-room" disabled>Leave Room</button>
            </div>

            <div class="rooms-container">
                <strong>Joined Rooms:</strong>
                <div class="rooms-list"></div>
            </div>

            <div class="form-group">
                <label>Event Management:</label>
                <input type="text" class="event-name" placeholder="Enter event name">
                <button class="btn btn-success subscribe" disabled>Subscribe</button>
                <button class="btn btn-danger unsubscribe" disabled>Unsubscribe</button>
            </div>

            <div class="form-group">
                <label>Send Event:</label>
                <input type="text" class="emit-event" placeholder="Event name">
                <input type="text" class="emit-data" placeholder="Event data (JSON)">
                <button class="btn btn-primary emit" disabled>Send</button>
            </div>

            <div class="events-container">
                <div class="event-item">Events will appear here...</div>
            </div>
        </div>
    </template>

    <script>
        class SocketClient {
            constructor(container) {
                this.container = container;
                this.socket = null;
                this.subscribedEvents = new Set();
                this.joinedRooms = new Set();
                this.initElements();
                this.initEventListeners();
            }

            initElements() {
                this.elements = {
                    serverUrl: this.container.querySelector('.server-url'),
                    connect: this.container.querySelector('.connect'),
                    disconnect: this.container.querySelector('.disconnect'),
                    connectionStatus: this.container.querySelector('.connection-status'),
                    socketId: this.container.querySelector('.socket-id'),
                    roomName: this.container.querySelector('.room-name'),
                    joinRoom: this.container.querySelector('.join-room'),
                    leaveRoom: this.container.querySelector('.leave-room'),
                    roomsList: this.container.querySelector('.rooms-list'),
                    eventName: this.container.querySelector('.event-name'),
                    subscribe: this.container.querySelector('.subscribe'),
                    unsubscribe: this.container.querySelector('.unsubscribe'),
                    emitEvent: this.container.querySelector('.emit-event'),
                    emitData: this.container.querySelector('.emit-data'),
                    emit: this.container.querySelector('.emit'),
                    events: this.container.querySelector('.events-container')
                };
            }

            initEventListeners() {
                this.elements.connect.addEventListener('click', () => this.connect());
                this.elements.disconnect.addEventListener('click', () => this.disconnect());
                this.elements.joinRoom.addEventListener('click', () => this.joinRoom());
                this.elements.leaveRoom.addEventListener('click', () => this.leaveRoom());
                this.elements.subscribe.addEventListener('click', () => this.subscribe());
                this.elements.unsubscribe.addEventListener('click', () => this.unsubscribe());
                this.elements.emit.addEventListener('click', () => this.emitEvent());
            }

            updateConnectionStatus(status, sid = '-') {
                this.elements.connectionStatus.textContent = status;
                this.elements.socketId.textContent = sid;

                const isConnected = status === 'Connected';
                this.elements.connect.disabled = isConnected;
                this.elements.disconnect.disabled = !isConnected;
                this.elements.joinRoom.disabled = !isConnected;
                this.elements.leaveRoom.disabled = !isConnected;
                this.elements.subscribe.disabled = !isConnected;
                this.elements.unsubscribe.disabled = !isConnected;
                this.elements.emit.disabled = !isConnected;
            }

            addEventMessage(message) {
                const div = document.createElement('div');
                div.className = 'event-item';
                div.textContent = `${new Date().toLocaleTimeString()} - ${message}`;
                this.elements.events.appendChild(div);
                this.elements.events.scrollTop = this.elements.events.scrollHeight;
            }

            updateRoomsList() {
                this.elements.roomsList.innerHTML = '';
                this.joinedRooms.forEach(room => {
                    const div = document.createElement('div');
                    div.className = 'room-item';
                    div.textContent = room;
                    this.elements.roomsList.appendChild(div);
                });
            }

            connect() {
                if (this.socket) {
                    this.addEventMessage('Already connected');
                    return;
                }

                const url = this.elements.serverUrl.value;
                try {
                    this.socket = io(url);

                    this.socket.on('connect', () => {
                        this.updateConnectionStatus('Connected', this.socket.id);
                        this.addEventMessage(`Connected to ${url}`);
                        this.socket.emit('getRooms');

                        this.socket.on('random2', function (arg1, arg2) {
                            console.log('received random2', arg1, arg2);
                        });
                    });

                    this.socket.on('roomList', (rooms) => {
                        this.joinedRooms = new Set(rooms);
                        this.updateRoomsList();
                        this.addEventMessage(`Updated room list: ${rooms.join(', ') || 'none'}`);
                    });

                    this.socket.on('disconnect', () => {
                        this.updateConnectionStatus('Disconnected');
                        this.addEventMessage('Disconnected from server');
                        this.joinedRooms.clear();
                        this.updateRoomsList();
                    });

                    this.socket.on('connect_error', (error) => {
                        this.addEventMessage(`Connection error: ${error.message}`);
                    });

                } catch (error) {
                    this.addEventMessage(`Error creating connection: ${error.message}`);
                }
            }

            disconnect() {
                if (!this.socket) {
                    this.addEventMessage('Not connected');
                    return;
                }
                this.socket.disconnect();
                this.socket = null;
                this.subscribedEvents.clear();
            }

            joinRoom() {
                if (!this.socket) {
                    this.addEventMessage('Not connected');
                    return;
                }
                const roomName = this.elements.roomName.value;
                if (roomName) {
                    this.socket.emit('joinRoom', roomName);
                    this.addEventMessage(`Requested to join room: ${roomName}`);
                }
            }

            leaveRoom() {
                if (!this.socket) {
                    this.addEventMessage('Not connected');
                    return;
                }
                const roomName = this.elements.roomName.value;
                if (roomName) {
                    this.socket.emit('leaveRoom', { room: roomName });
                    this.addEventMessage(`Requested to leave room: ${roomName}`);
                }
            }

            subscribe() {
                if (!this.socket) {
                    this.addEventMessage('Not connected');
                    return;
                }
                const eventName = this.elements.eventName.value;
                if (eventName && !this.subscribedEvents.has(eventName)) {
                    this.socket.on(eventName, (data) => {
                        this.addEventMessage(`Received '${eventName}': ${JSON.stringify(data)}`);
                    });
                    this.subscribedEvents.add(eventName);
                    this.addEventMessage(`Subscribed to event: ${eventName}`);
                }
            }

            unsubscribe() {
                if (!this.socket) {
                    this.addEventMessage('Not connected');
                    return;
                }
                const eventName = this.elements.eventName.value;
                if (eventName && this.subscribedEvents.has(eventName)) {
                    this.socket.off(eventName);
                    this.subscribedEvents.delete(eventName);
                    this.addEventMessage(`Unsubscribed from event: ${eventName}`);
                }
            }

            emitEvent() {
                if (!this.socket) {
                    this.addEventMessage('Not connected');
                    return;
                }
                const eventName = this.elements.emitEvent.value;
                const eventData = this.elements.emitData.value;
                if (eventName) {
                    try {
                        const data = eventData ? JSON.parse(eventData) : null;
                        this.socket.emit(eventName, data);
                        this.addEventMessage(`Emitted '${eventName}': ${eventData}`);
                    } catch (error) {
                        this.addEventMessage(`Error emitting event: ${error.message}`);
                    }
                }
            }
        }

        class TabManager {
            constructor() {
                this.tabCount = 1;
                this.clients = new Map();
                this.initEventListeners();
                this.initFirstClient();
            }

            initEventListeners() {
                document.querySelector('.add-tab').addEventListener('click', () => this.addTab());
                document.querySelector('.tabs').addEventListener('click', (e) => {
                    if (e.target.classList.contains('tab')) {
                        this.activateTab(e.target.dataset.tab);
                    } else if (e.target.classList.contains('tab-close')) {
                        this.closeTab(e.target.parentElement.dataset.tab);
                    }
                });
            }

            initFirstClient() {
                const container = document.querySelector('#tab1');
                this.clients.set('tab1', new SocketClient(container));
            }

            addTab() {
                this.tabCount++;
                const tabId = `tab${this.tabCount}`;

                // 创建新标签
                const tab = document.createElement('div');
                tab.className = 'tab';
                tab.dataset.tab = tabId;
                tab.innerHTML = `Client ${this.tabCount}<span class="tab-close">×</span>`;
                document.querySelector('.add-tab').insertAdjacentElement('beforebegin', tab);

                // 创建新内容
                const content = document.createElement('div');
                content.id = tabId;
                content.className = 'tab-content';
                content.innerHTML = document.getElementById('client-template').innerHTML;
                document.querySelector('.debug-container').appendChild(content);

                // 初始化新客户端
                this.clients.set(tabId, new SocketClient(content));

                // 激活新标签
                this.activateTab(tabId);
            }

            activateTab(tabId) {
                document.querySelectorAll('.tab').forEach(tab => {
                    tab.classList.toggle('active', tab.dataset.tab === tabId);
                });
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.toggle('active', content.id === tabId);
                });
            }

            closeTab(tabId) {
                if (this.clients.size === 1) {
                    return; // 保留至少一个标签
                }

                const client = this.clients.get(tabId);
                if (client && client.socket) {
                    client.disconnect();
                }
                this.clients.delete(tabId);

                document.querySelector(`[data-tab="${tabId}"]`).remove();
                document.getElementById(tabId).remove();

                // 如果关闭的是当前标签，激活第一个可见标签
                const firstTab = document.querySelector('.tab').dataset.tab;
                this.activateTab(firstTab);
            }
        }

        // 初始化标签管理器
        new TabManager();
    </script>
</body>
</html>
